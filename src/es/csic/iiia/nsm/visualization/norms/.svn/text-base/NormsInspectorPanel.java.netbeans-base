/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.csic.iiia.nsm.visualization.norms;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.LayoutStyle;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

import es.csic.iiia.nsm.NormSynthesisMachine;
import es.csic.iiia.nsm.config.Dimension;
import es.csic.iiia.nsm.config.Goal;
import es.csic.iiia.nsm.net.norm.NormativeNetwork;
import es.csic.iiia.nsm.norm.Norm;
import es.csic.iiia.nsm.norm.evaluation.Utility;
import es.csic.iiia.nsm.visualization.NormSynthesisInspector;

/**
 *
 * @author javi
 */
public class NormsInspectorPanel extends JPanel {

	//---------------------------------------------------------------------------
	// Static attributes
	//---------------------------------------------------------------------------

	private static final long serialVersionUID = -879219768774581815L;

	//---------------------------------------------------------------------------
	// Attributes
	//---------------------------------------------------------------------------

	private JButton btnPerfRange;
	private JButton btnUpdate;
	private JLabel lblDescription;
	private JLabel lblDiscardedNorms;
	private JLabel lblEffectiveness;
	private JLabel lblGenMode;
	private JLabel lblGenModeInfo;
	private JLabel lblGenStep;
	private JLabel lblGenStepInfo;
	private JLabel lblNNCardinality;
	private JLabel lblNNCardinalityInfo;
	private JLabel lblNSCardinalityInfo;
	private JLabel lblNSStrategy;
	private JLabel lblNSStrategyInfo;
	private JLabel lblNSCardinality;
	private JLabel lblNecessity;
	private JLabel lblNormsInUse;
	private JLabel lblPerfRange;
	private JLabel lblTitle;
	private JScrollPane panelNormsInUse;
	private JScrollPane panelDescription;
	private JScrollPane panelDiscardedNorms;
	private JPanel panelInspectedNorm;
	private JPanel panelNSMethod;
	private JPanel panelNSMetrics;
	private JPanel panelNormDescPanel;
	private JPanel panelNormGroups;
	private JPanel panelNorms;
	private JPanel panelSynthNorms;
	private JProgressBar pbEffectiveness;
	private JProgressBar pbNecessity;
	private JTabbedPane tabbedPanel;
	private JTextArea textNormDescription;
	private JTree treeDiscardedNorms;
	private JTree treeNormsInUse;

	private NormSynthesisMachine nsm;
	private NormativeNetwork normativeNetwork;
	private Norm selectedNorm;

	//---------------------------------------------------------------------------
	// Methods
	//---------------------------------------------------------------------------

	/**
	 * Creates new form NormsTracerPanel
	 */
	public NormsInspectorPanel(NormSynthesisInspector nsInspector) {
		initComponents();

		this.nsm = nsInspector.getNormSynthesisMachine();
		this.normativeNetwork = this.nsm.getNormativeNetwork();
		this.selectedNorm = null;
		
		this.updateTreeNormsInUse();
		this.updateTreeDiscardedNorms();
	}

	/**
	 * 
	 */
	public void updateGUI() {
		lblGenModeInfo.setText(this.nsm.getNormSynthesisMode().toString());
		lblGenStepInfo.setText(Integer.toString(this.nsm.getNormGeneralisationStep()));
	}
	
	/**
	 * 
	 * @param evt
	 */
	private void btnPerfRangeActionPerformed(ActionEvent evt) {
		if(this.selectedNorm != null) {
			this.nsm.getTracer().addNormScoreChart(this.selectedNorm);
		}
	}

	/**
	 * 
	 * @param evt
	 */
	private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
		List<Norm> nsNorms = normativeNetwork.getNormativeSystem();

		/* Update norm synthesis metrics */
		this.lblNSCardinalityInfo.setText(String.valueOf(nsNorms.size()));
		this.lblNNCardinalityInfo.setText(String.valueOf(normativeNetwork.getCardinality()));
		
		this.updateTreeNormsInUse();
		this.updateTreeDiscardedNorms();
	}

	/**
	 * 
	 * @param evt
	 */
	private void treeNormsInUseChanged(TreeSelectionEvent evt) {
		if(treeNormsInUse.getLastSelectedPathComponent() 
				instanceof DefaultMutableTreeNode) {

			DefaultMutableTreeNode srcNode = 
					(DefaultMutableTreeNode)treeNormsInUse.getLastSelectedPathComponent();
			Object src = srcNode.getUserObject();

			if(src instanceof Norm) {
				this.selectedNorm = (Norm)src;
				this.updateSelectedNorm();
			}
		}
	}

	/**
	 * 
	 * @param evt
	 */
	private void treeDiscardedNormsChanged(TreeSelectionEvent evt) {
		if(treeDiscardedNorms.getLastSelectedPathComponent() 
				instanceof DefaultMutableTreeNode) {

			DefaultMutableTreeNode srcNode = 
					(DefaultMutableTreeNode)treeDiscardedNorms.getLastSelectedPathComponent();
			Object src = srcNode.getUserObject();

			if(src instanceof Norm) {
				this.selectedNorm = (Norm)src;
			}
		}
	}
	/**
	 * 
	 * 
	 * @param cSolution
	 */
	private void updateTreeNormsInUse() {
		List<Norm> nsNorms = normativeNetwork.getNormativeSystem();
		TreePath focus = null;

		this.treeNormsInUse.removeAll();

		/* Update tree of norms in use */
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Norms in use (" + nsNorms.size() + ")");
		TreeModel tmodel = new DefaultTreeModel(rootNode);

		// Add norms that are being evaluated
		for(Norm norm : nsNorms) {
			this.fillTree(rootNode, norm);
		}

		this.treeNormsInUse.setModel(tmodel);
		this.treeNormsInUse.setSelectionPath(focus);
		this.treeNormsInUse.validate();
	}

	/**
	 * 
	 */
	private void updateTreeDiscardedNorms() {
		List<Norm> notRepresented = normativeNetwork.getNotRepresentedNorms();
		List<Norm> notRepresentedGeneralNorms = new ArrayList<Norm>();
		TreePath focus = null;

		for(Norm norm : notRepresented) {
			if(this.normativeNetwork.getParents(norm).size() == 0) {
				notRepresentedGeneralNorms.add(norm);
			}
		}
		this.treeDiscardedNorms.removeAll();

		/* Update tree of norms in use */
		DefaultMutableTreeNode rootNode =
				new DefaultMutableTreeNode("Discarded norms (" + notRepresented.size() + ")");
		TreeModel tmodel = new DefaultTreeModel(rootNode);

		// Add norms that are being evaluated
		for(Norm norm : notRepresentedGeneralNorms) {
			this.fillTree(rootNode, norm);
		}

		this.treeDiscardedNorms.setModel(tmodel);
		this.treeDiscardedNorms.setSelectionPath(focus);
		this.treeDiscardedNorms.validate();
	}

	/**
	 * 
	 */
	private void updateSelectedNorm() {
		List<Goal> goals = this.nsm.getNormSynthesisSettings().getSystemGoals();
		Utility utility = this.normativeNetwork.getUtility(selectedNorm);
		float eff = utility.getScore(Dimension.Effectiveness, goals.get(0));
		float nec = utility.getScore(Dimension.Necessity, goals.get(0));
		
		this.pbEffectiveness.setValue((int)(eff * 100));
		this.pbNecessity.setValue((int)(nec * 100));
		
		this.setSelectedNormDescription();
	}
	
	/**
	 * 
	 */
	private void setSelectedNormDescription() {
		String s = "";
		Norm n = this.selectedNorm;
		
		s += "Pre-condition\n";
		s += "-------\n";
		s += n.getPrecondition().toString() + "\n\n";

		s += "Post-condition\n";
		s += "-------\n";
		s += n.getModality() + "(" + n.getAction() + ")";

		s += "\n\nParent norms\n";
		s += "-------";

		for(Norm parent : this.normativeNetwork.getParents(n)) {
			s += "\n" + parent.toString();
		}

		s += "\n\nChild norms\n";
		s += "--------";

		for(Norm child : this.normativeNetwork.getChildren(n)) {
			s += "\n" + child.toString();
		}
		
		this.textNormDescription.setText(s);
	}
	
	/**
	 * 
	 * @param node
	 * @param children
	 */
	private void fillTree(DefaultMutableTreeNode parentNode, Norm norm) {
		List<Norm> children = normativeNetwork.getChildren(norm);
		DefaultMutableTreeNode node = new DefaultMutableTreeNode(norm);
		parentNode.add(node);

		for(Norm child : children) {
			this.fillTree(node, child);
		}
	}
	
	/**
	 * This method is called from within the constructor to initialise the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		lblTitle = new JLabel();
		tabbedPanel = new JTabbedPane();
		panelNorms = new JPanel();
		panelSynthNorms = new JPanel();
		lblNormsInUse = new JLabel();
		panelNormsInUse = new JScrollPane();
		treeNormsInUse = new JTree();
		lblDiscardedNorms = new JLabel();
		panelDiscardedNorms = new JScrollPane();
		treeDiscardedNorms = new JTree();
		panelInspectedNorm = new JPanel();
		pbEffectiveness = new JProgressBar();
		pbNecessity = new JProgressBar();
		lblEffectiveness = new JLabel();
		lblNecessity = new JLabel();
		lblDescription = new JLabel();
		panelDescription = new JScrollPane();
		textNormDescription = new JTextArea();
		panelNormDescPanel = new JPanel();
		lblPerfRange = new JLabel();
		btnPerfRange = new JButton();
		panelNSMethod = new JPanel();
		lblNSStrategy = new JLabel();
		lblNSStrategyInfo = new JLabel();
		lblGenMode = new JLabel();
		lblGenModeInfo = new JLabel();
		lblGenStep = new JLabel();
		lblGenStepInfo = new JLabel();
		panelNSMetrics = new JPanel();
		lblNSCardinality = new JLabel();
		lblNNCardinality = new JLabel();
		lblNSCardinalityInfo = new JLabel();
		lblNNCardinalityInfo = new JLabel();
		btnUpdate = new JButton();
		panelNormGroups = new JPanel();

		setBackground(java.awt.Color.lightGray);

		lblTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
		lblTitle.setIcon(new ImageIcon("/home/javi/Proyectos/Eclipse/NormLab/misc/launcher/icons/magnifGlass.png")); // NOI18N
		lblTitle.setText("Norms Inspector");
		lblTitle.setBorder(BorderFactory.createEtchedBorder());
		lblTitle.setOpaque(true);

		tabbedPanel.setBackground(java.awt.Color.lightGray);
		tabbedPanel.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N

		panelNorms.setBackground(java.awt.Color.lightGray);

		panelSynthNorms.setBackground(java.awt.Color.lightGray);
		panelSynthNorms.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Synthesised norms", 0, 0, new java.awt.Font("Arial", 1, 13), java.awt.Color.blue)); // NOI18N

		lblNormsInUse.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblNormsInUse.setText("Norms in use");

		treeNormsInUse.setBorder(BorderFactory.createEtchedBorder());
		treeNormsInUse.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		panelNormsInUse.setViewportView(treeNormsInUse);
		treeNormsInUse.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
			public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
				treeNormsInUseChanged(evt);
			}
		});		
		
		
		lblDiscardedNorms.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblDiscardedNorms.setText("Discarded norms");

		treeDiscardedNorms.setBorder(BorderFactory.createEtchedBorder());
		treeDiscardedNorms.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		panelDiscardedNorms.setViewportView(treeDiscardedNorms);
		treeDiscardedNorms.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
			public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
				treeDiscardedNormsChanged(evt);
			}
		});

		GroupLayout panelSynthNormsLayout = new GroupLayout(panelSynthNorms);
		panelSynthNorms.setLayout(panelSynthNormsLayout);
		panelSynthNormsLayout.setHorizontalGroup(
				panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelSynthNormsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(panelNormsInUse, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblNormsInUse))
								.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addGroup(panelSynthNormsLayout.createSequentialGroup()
												.addComponent(lblDiscardedNorms)
												.addGap(0, 0, Short.MAX_VALUE))
												.addComponent(panelDiscardedNorms))
												.addContainerGap())
				);
		panelSynthNormsLayout.setVerticalGroup(
				panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelSynthNormsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								.addComponent(lblDiscardedNorms)
								.addComponent(lblNormsInUse))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelSynthNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
										.addComponent(panelDiscardedNorms, GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
										.addComponent(panelNormsInUse, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
										.addGap(12, 12, 12))
				);

		panelInspectedNorm.setBackground(java.awt.Color.lightGray);
		panelInspectedNorm.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Inspected norm", 0, 0, new java.awt.Font("Arial", 1, 13), java.awt.Color.blue)); // NOI18N

		pbEffectiveness.setToolTipText("");
		pbEffectiveness.setStringPainted(true);

		pbNecessity.setStringPainted(true);

		lblEffectiveness.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblEffectiveness.setText("Effectiveness");

		lblNecessity.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblNecessity.setText("Necessity");

		lblDescription.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblDescription.setText("Description");

		textNormDescription.setColumns(20);
		textNormDescription.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		textNormDescription.setRows(5);
		textNormDescription.setBorder(BorderFactory.createEtchedBorder());
		panelDescription.setViewportView(textNormDescription);

		panelNormDescPanel.setBackground(java.awt.Color.lightGray);
		panelNormDescPanel.setBorder(BorderFactory.createEtchedBorder());

		GroupLayout panelNormDescPanelLayout = new GroupLayout(panelNormDescPanel);
		panelNormDescPanel.setLayout(panelNormDescPanelLayout);
		panelNormDescPanelLayout.setHorizontalGroup(
				panelNormDescPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);
		panelNormDescPanelLayout.setVerticalGroup(
				panelNormDescPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 67, Short.MAX_VALUE)
				);

		lblPerfRange.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblPerfRange.setText("Performance ranges");

		btnPerfRange.setIcon(new ImageIcon("/home/javi/Proyectos/Eclipse/NormLab/misc/launcher/icons/utility.png")); // NOI18N
		btnPerfRange.setText("Show");
		btnPerfRange.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnPerfRangeActionPerformed(evt);
			}
		});

		GroupLayout panelInspectedNormLayout = new GroupLayout(panelInspectedNorm);
		panelInspectedNorm.setLayout(panelInspectedNormLayout);
		panelInspectedNormLayout.setHorizontalGroup(
				panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelInspectedNormLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(panelNormDescPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(panelInspectedNormLayout.createSequentialGroup()
										.addComponent(lblPerfRange)
										.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(btnPerfRange))
										.addComponent(panelDescription, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
										.addGroup(GroupLayout.Alignment.TRAILING, panelInspectedNormLayout.createSequentialGroup()
												.addComponent(lblEffectiveness)
												.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(pbEffectiveness, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
												.addGroup(panelInspectedNormLayout.createSequentialGroup()
														.addComponent(lblDescription)
														.addGap(0, 0, Short.MAX_VALUE))
														.addGroup(panelInspectedNormLayout.createSequentialGroup()
																.addComponent(lblNecessity, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(pbNecessity, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
																.addContainerGap())
				);
		panelInspectedNormLayout.setVerticalGroup(
				panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(GroupLayout.Alignment.TRAILING, panelInspectedNormLayout.createSequentialGroup()
						.addContainerGap()
						.addComponent(panelNormDescPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(lblDescription)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(panelDescription, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								.addComponent(pbEffectiveness, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblEffectiveness))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(lblNecessity)
										.addComponent(pbNecessity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
										.addGap(12, 12, 12)
										.addGroup(panelInspectedNormLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
												.addComponent(btnPerfRange)
												.addComponent(lblPerfRange))
												.addContainerGap(20, Short.MAX_VALUE))
				);

		panelNSMethod.setBackground(java.awt.Color.lightGray);
		panelNSMethod.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
				"Norm synthesis method", 0, 0, new java.awt.Font("Arial", 1, 13), java.awt.Color.blue)); // NOI18N

		lblNSStrategy.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblNSStrategy.setText("Norm synthesis strategy:");

		lblNSStrategyInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		lblNSStrategyInfo.setText("SIMON");

		lblGenMode.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblGenMode.setText("Norm generalisation mode: ");

		lblGenModeInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

		lblGenStep.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblGenStep.setText("Generalisation step:");

		lblGenStepInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		
		GroupLayout panelNSMethodLayout = new GroupLayout(panelNSMethod);
		panelNSMethod.setLayout(panelNSMethodLayout);
		panelNSMethodLayout.setHorizontalGroup(
				panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNSMethodLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(lblNSStrategy, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblGenMode))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addGroup(panelNSMethodLayout.createSequentialGroup()
												.addComponent(lblGenModeInfo)
												.addGap(18, 18, 18)
												.addComponent(lblGenStep)
												.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(lblGenStepInfo, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
												.addComponent(lblNSStrategyInfo))
												.addContainerGap(62, Short.MAX_VALUE))
				);
		panelNSMethodLayout.setVerticalGroup(
				panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNSMethodLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								.addComponent(lblNSStrategy)
								.addComponent(lblNSStrategyInfo))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelNSMethodLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(lblGenMode)
										.addComponent(lblGenModeInfo)
										.addComponent(lblGenStep)
										.addComponent(lblGenStepInfo))
										.addContainerGap(13, Short.MAX_VALUE))
				);

		panelNSMetrics.setBackground(java.awt.Color.lightGray);
		panelNSMetrics.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Norm synthesis metrics", 0, 0, new java.awt.Font("Arial", 1, 13), java.awt.Color.blue)); // NOI18N

		lblNSCardinality.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblNSCardinality.setText("Normative system cardinality:");

		lblNNCardinality.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		lblNNCardinality.setText("Normative network cardinality:");

		lblNSCardinalityInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		lblNSCardinalityInfo.setText("20");

		lblNNCardinalityInfo.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
		lblNNCardinalityInfo.setText("20");

		GroupLayout panelNSMetricsLayout = new GroupLayout(panelNSMetrics);
		panelNSMetrics.setLayout(panelNSMetricsLayout);
		panelNSMetricsLayout.setHorizontalGroup(
				panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNSMetricsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(lblNNCardinality)
								.addComponent(lblNSCardinality))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
										.addComponent(lblNSCardinalityInfo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(lblNNCardinalityInfo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addContainerGap())
				);
		panelNSMetricsLayout.setVerticalGroup(
				panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNSMetricsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								.addComponent(lblNSCardinality)
								.addComponent(lblNSCardinalityInfo))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelNSMetricsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(lblNNCardinality)
										.addComponent(lblNNCardinalityInfo))
										.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		btnUpdate.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
		btnUpdate.setIcon(new ImageIcon("/home/javi/Proyectos/Eclipse/NormLab/misc/launcher/icons/update.png")); // NOI18N
		btnUpdate.setText("Update");
		btnUpdate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnUpdateActionPerformed(evt);
			}
		});
		
		GroupLayout panelNormsLayout = new GroupLayout(panelNorms);
		panelNorms.setLayout(panelNormsLayout);
		panelNormsLayout.setHorizontalGroup(
				panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNormsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addGroup(panelNormsLayout.createSequentialGroup()
										.addGroup(panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
												.addComponent(panelNSMethod, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(panelSynthNorms, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
														.addComponent(panelNSMetrics, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(panelInspectedNorm, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
														.addGroup(panelNormsLayout.createSequentialGroup()
																.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)
																.addGap(0, 0, Short.MAX_VALUE)))
																.addContainerGap())
				);
		panelNormsLayout.setVerticalGroup(
				panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(panelNormsLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
								.addComponent(panelNSMethod, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(panelNSMetrics, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(panelNormsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
										.addComponent(panelSynthNorms, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(panelInspectedNorm, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(btnUpdate, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addGap(12, 12, 12))
				);

		tabbedPanel.addTab("Norms", panelNorms);

		panelNormGroups.setBackground(java.awt.Color.lightGray);

		GroupLayout panelNormGroupsLayout = new GroupLayout(panelNormGroups);
		panelNormGroups.setLayout(panelNormGroupsLayout);
		panelNormGroupsLayout.setHorizontalGroup(
				panelNormGroupsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 761, Short.MAX_VALUE)
				);
		panelNormGroupsLayout.setVerticalGroup(
				panelNormGroupsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 538, Short.MAX_VALUE)
				);

		tabbedPanel.addTab("", panelNormGroups);

		GroupLayout layout = new GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(tabbedPanel)
								.addComponent(lblTitle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(lblTitle)
						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(tabbedPanel)
						.addContainerGap())
				);

		tabbedPanel.getAccessibleContext().setAccessibleName("Norms");
	}
}
