/**
 * 
 * @author Javier Morales (jmorales@iiia.csic.es)
 */
package es.csic.iiia.nsm.norm.evaluation;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * @author "Javier Morales (jmorales@iiia.csic.es)"
 *
 */
public class PerformanceRange {

	//---------------------------------------------------------------------------
	// Atributes
	//---------------------------------------------------------------------------

	private int rangeSize;
	private int numValues;
	private boolean hasNewValue;
	
	private LinkedList<Float> punctualValues = null;
	private LinkedList<Float> average = null;
	private LinkedList<Float> topBoundary = null;
	private LinkedList<Float> bottomBoundary = null;
	
	//---------------------------------------------------------------------------
	// Methods
	//---------------------------------------------------------------------------

	/**
	 * Constructor
	 * 
	 * @param size
	 */
	public PerformanceRange(int size){
		this.punctualValues = new LinkedList<Float>();
		this.average = new LinkedList<Float>();
		this.topBoundary = new LinkedList<Float>();
		this.bottomBoundary = new LinkedList<Float>();
		
		this.rangeSize = size;
		this.numValues = 0;
		this.hasNewValue = false;
	}

	/**
	 * Adds a value to the window
	 * 
	 * @param value
	 */
	public void addValue(float value) {
		this.punctualValues.offer(value);
		this.hasNewValue = true;
		this.numValues++;
		
		/* Add new values of average and boundaries */
		float avg = this.getAvg();
		this.average.add(avg);
		
		float stdDev = this.getStdDev();
		this.topBoundary.add(avg + stdDev);
		this.bottomBoundary.add(avg - stdDev);
		
		/* Remove old values */
		if(this.numValues > this.rangeSize) {
			this.punctualValues.remove();
			this.average.remove();
			this.topBoundary.remove();
			this.bottomBoundary.remove();
			this.numValues--;
		}
	}

	/**
	 * 
	 * @return
	 */
	public boolean hasNewValue() {
		return this.hasNewValue;
	}
	
	/**
	 * 
	 * @param newValue
	 */
	public void setNewValue(boolean newValue) {
		this.hasNewValue = newValue;
	}
	
	/**
	 * 
	 * @return
	 */
	public LinkedList<Float> getPunctualValuesSeries() {
		return this.punctualValues;
	}
	
	/**
	 * 
	 * @return
	 */
	public LinkedList<Float> getAverageSeries() {
		return this.average;
	}
	
	/**
	 * 
	 * @return
	 */
	public LinkedList<Float> getTopBoundarySeries() {
		return this.topBoundary;
	}
	
	/**
	 * 
	 * @return
	 */
	public LinkedList<Float> getBottomBoundarySeries() {
		return this.bottomBoundary;
	}
	
	/**
	 * 
	 * @param i
	 * @return
	 */
	public float getPunctualValueAt(int i) {
		return this.punctualValues.get(i);
	}
	
	/**
	 * 
	 * @param i
	 * @return
	 */
	public float getAverageAt(int i) {
		return this.average.get(i);
	}
	
	/**
	 * 
	 * @param i
	 * @return
	 */
	public float getTopBoundaryAt(int i) {
		return this.topBoundary.get(i);
	}
	
	/**
	 * 
	 * @param i
	 * @return
	 */
	public float getBottomBoundaryAt(int i) {
		return this.bottomBoundary.get(i);
	}
	
	/**
	 * 
	 * @return
	 */
	public float getLastPunctualValue() {
		return this.punctualValues.getLast();
	}
	
	/**
	 * 
	 * @return
	 */
	public float getLastAverageValue() {
		return this.average.getLast();
	}
	
	/**
	 * 
	 * @return
	 */
	public float getLastTopBoundaryValue() {
		return this.topBoundary.getLast();
	}
	
	/**
	 * 
	 * @return
	 */
	public float getLastBottomBoundaryValue() {
		return this.bottomBoundary.getLast();
	}
	
	/**
	 * 
	 * @return
	 */
	public int getNumValues() {
		return this.numValues;
	}
	
	//---------------------------------------------------------------------------
	// Private methods
	//---------------------------------------------------------------------------
	
	/**
	 * Returns the total sum of the values in the window
	 * 
	 * @return
	 */
	private float getSum(){
		float sum = 0;

		if(this.numValues == 0)
			return 0f;

		Iterator<Float> it = punctualValues.listIterator();
		while(it.hasNext()){
			sum+=it.next();
		}
		return sum;
	}
	
	/**
	 * 
	 * @return
	 */
	private float getAvg(){
		float sum = this.getSum();
		if(numValues == 0) {
			return 0f;
		}
		float ret = sum / (float) numValues;
		return ret;
	}
	
	/**
	 * 
	 * @return
	 */
	private float getStdDev() {
		double stdDev = Math.sqrt(this.getVar());
		return (float) stdDev;
	}

	/**
	 * 
	 * @return
	 */
	private float getVar() {
		float var = 0f;

		for(Float num : this.punctualValues) {
			var += Math.pow((num - average.getLast()), 2);
		}
		var /= numValues;
		return var;
	}
}
